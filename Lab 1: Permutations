CS 2401Elementary Data Structures
Summer 2017, Lab 1

Assignment. An array a of type T with length n can be seen as a function from the set of indices {0,1,2,...,n-1} to the set of elements of type T. For example, 

char [] a = {'a','b','c','d'}

defines a map that takes 0 to 'a', 1 to 'b', 2 to 'c', and 3 to 'd'. 
We define a permutation array a of length n to be an array that contains exactly once each of the elements of the set {0,1,2,...,n-1}, this is, a can be seen as a function from the set {0,1,2,...,n-1} to {0,1,2,...,n-1}. For instance,

int [] a1 = {1,3,0,2}

is a permutation array, whereas 

int [] a2 = {2,1,2,0}

is not.
Write a java program that takes as inputs files that contains two lines: the first line is a positive integer n that is the length of the array, the second line contains the elements of the array separated by a single space. Your program should do the following:
Decides if a given array of integers is a permutation array.
Given two permutation arrays, computes their composition.
Given a permutation array, computes its inverse.
Given a permutation array a and an integer k, computes the power a^k (=a composed to itself k times).
Example. Suppose that a, and b are both permutation arrays given by [3,2,1,0] and [2,1,0,3] respectively, we can see that both a and b are both permutation arrays of length 4. The composition of a with b is [1,2,3,0], since 0 goes to 2, and 2 goes to 1; 1 goes to 1, and 1 goes to 2; 2 goes to 0 and 0 goes to 3; and 3 goes to 3, and 3 goes to 0.
The inverse of a is [3,2,1,0], note that the composition of a with its inverse is [0,1,2,3], which is the identity permutation. Finally, [2,1,0,3]^2, b composed to itself, is [0,1,2,3].
When it is due. The program is due at the beginning of the first lab section on Tuesday June 20th.

How to submit: Your TA will instruct you how to submit the programs.



/**
 * Created by LoriPena on 6/19/17.
 * Lorianne Pena
 * CS 2401 Summer 2017
 * Lab 1
 */

import java.util.*;
import java.io.*;

public class lab1 {


    public static int[] readFromFile() { //method to read file
        Scanner scnr = new Scanner (System.in);
        FileReader file;
        BufferedReader reader;

        while (true) {
            try {
                System.out.println ("Please enter a file path: ");
                file = new FileReader (scnr.nextLine ( ));
                reader = new BufferedReader (file);

                int k = Integer.parseInt (reader.readLine ( ));
                String[] intStrings = reader.readLine ( ).split (" ");
                int[] ints = new int[intStrings.length];
                for (int i = 0; i < intStrings.length; i++) {
                    ints[i] = Integer.parseInt (intStrings[i]);
                }
                if (k != ints.length) throw new InputMismatchException ("Data does not make sense!");
                return ints;
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println ("Something went wrong!");
            } catch (IOException e) {
                System.out.println ("File Error!");
            } catch (InputMismatchException e) {
                System.out.println (e.getMessage ( ));
            }

        }
    }

    public static boolean isPermutation(int[] a) {//method to test if the file is a permutation

        for (int i = 0; i < a.length; i++) {
            //condition number 1
            if (a[i] < 0 || a[i] > a.length - 1) return false;
            for (int j = i + 1; j < a.length; j++) {
                if (a[i] == a[j]) return false;
            }
        }
        return true;

    }

    //Utility
    public static int[] comp(int[] f, int[] g) {//method to compose permutation
        //f and g are of different lengths
        if (f.length != g.length) return null;
        //f OR g could not be permutations
        if (!isPermutation (f) || !isPermutation (g)) {
            System.out.println ("This array is not a permutation. Please try again!");
            int[] perm = readFromFile ( );
            printArray (perm);
        }
        //f or g (because they're objects) could be null
        if (f == null || g == null) {
        }


        int[] composition = new int[f.length];
        for (int i = 0; i < composition.length; i++) {
            composition[i] = g[f[i]];
        }
        return composition;
    }

    public static int[] inverse(int[] composition) {//method for inverse of permutation

        return composition;
    }

    public static int[] pow(int[] m, int k) {//method for computes power a^k
        //getting the length of the array
        int[] power = new int[m.length];
        for (int i = 0; i < m.length; i++) {//iterating through the array to multiply the indices
            power[i] = m[i] * k;
        }
        return power;
    }


    public static void printArray(int[] A) {//print
        for (int i = 0; i < A.length; i++) {
            System.out.print (A[i] + " ");
        }
        System.out.println ( );
    }

    public static void main(String[] args) throws FileNotFoundException {


        int[] array1 = readFromFile ( );//reading first file
        printArray (array1);//printing array
        System.out.println ("Is this a permutation?:" + isPermutation (array1));//checking if the array is a permutation
        int[] array2 = readFromFile ( );//reading second file
        printArray (array2);//printing array 2
        System.out.println ("Is this a permutation?:" + isPermutation (array2));//checking if the second array is a permutation
        int[] array3 = readFromFile ( );//reading array 3
        printArray (array3);//printing array 3
        System.out.println ("Is this a permutation?:" + isPermutation (array3));//checking if the third array is a permutation
        System.out.print ("Computation: ");
        printArray (comp (array2, array3));//printing the comp method
        System.out.print ("Inverse: ");
        printArray (inverse (array2));//printing the inverse method
        System.out.print ("Power:");
        int[] a = comp (array2, array3);//making a new array to pass for pow method parameter
        printArray (pow (a, +1));//printing pow method


    }

}
